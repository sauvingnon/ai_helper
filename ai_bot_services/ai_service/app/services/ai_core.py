import io
import base64
from groq import Groq
from config import API_TOKEN
from logger import logger
from app.api.schemas.model_name import AIRequest, speech_to_text_model, AIAudioResponse

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = Groq(api_key=API_TOKEN)


# --- üé§ Speech-to-Text ---
async def ai_voice_request(file: io.BytesIO) -> str | None:
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç."""
    try:
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å: {speech_to_text_model}")

        transcription = client.audio.transcriptions.create(
            file=file,
            model=speech_to_text_model,
            response_format="verbose_json",
            language="ru"
        )

        text = transcription.text.strip()
        logger.info("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        return text or None

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None


# --- üí¨ Chat LLM ---
async def ai_message_request(request: AIRequest) -> str | None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    try:
        if not request.message:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.")

        logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–∞—Ç-–∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ {request.model.value}")

        chat_completion = client.chat.completions.create(
            model=request.model.value,
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
                        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                    ),
                },
                {"role": "user", "content": request.message}
            ],
        )

        result = chat_completion.choices[0].message.content.strip()
        logger.info("–ß–∞—Ç-–∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        return result

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {e}")
        return None


# --- üîä Text-to-Speech ---
async def get_audio_response(text: str) -> str | None:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –æ–∑–≤—É—á–∫—É (base64)."""
    try:
        logger.info("–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")

        response = client.audio.speech.create(
            model="playai-tts",
            voice="Fritz-PlayAI",
            input=text,
            response_format="wav"
        )

        audio_bytes = response.read()
        audio_b64 = base64.b64encode(audio_bytes).decode("utf-8")

        logger.info("–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return audio_b64

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return None


# --- ü§ñ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def voice_handler(req: AIRequest) -> AIAudioResponse | None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∞—É–¥–∏–æ: —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç ‚Üí –æ—Ç–≤–µ—á–∞–µ—Ç."""
    if not req.audio_base64:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—É–¥–∏–æ –∑–∞–ø—Ä–æ—Å–∞.")

    try:
        # 1Ô∏è‚É£ base64 ‚Üí BytesIO
        audio_bytes = base64.b64decode(req.audio_base64)
        file = io.BytesIO(audio_bytes)
        file.name = "voice.wav"

        # 2Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å
        text = await ai_voice_request(file)
        if not text or text == "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...":
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."

        # 3Ô∏è‚É£ –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        req.message = text

        # 4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
        result = await ai_message_request(req)
        # base64_sound = await get_audio_response(result)
        if not result:
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
        
        response = AIAudioResponse(
            user_msg=text,
            response=result
            # audio_base64=base64_sound
        )

        # 5Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return response

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
