from vkbottle.bot import BotLabeler, Message, MessageEvent
from vkbottle import Keyboard, KeyboardButtonColor, Callback
from app.schemas.ai_service import ModelName, USER_MODELS, MODEL_CONFIG
from typing import Union

chat_labeler = BotLabeler()

# ---------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------

def get_model_keyboard():
    keyboard = Keyboard(one_time=True, inline=True)
    for m in ModelName:
        keyboard.add(
            Callback(
                label=m.name,
                payload={"command": f"choose_model:{m.value}"}
            )
        )
    keyboard.row()
    keyboard.add(
        Callback("‚ùå –û—Ç–º–µ–Ω–∞", payload={"command": "cancel_model"}),
        color=KeyboardButtonColor.NEGATIVE
    )
    return keyboard

def get_model_description() -> str:
    lines = ["üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"]
    for model, info in MODEL_CONFIG.items():
        block = (
            f"üîπ {model.value}\n"
            f"   ‚îú –†–æ–ª—å: {info.role}\n"
            f"   ‚îú –°–∫–æ—Ä–æ—Å—Ç—å: {info.speed}\n"
            f"   ‚îú –ö–∞—á–µ—Å—Ç–≤–æ: {info.quality}\n"
            f"   ‚îî {info.notes}\n"
        )
        lines.append(block)
    return "\n".join(lines)

# ---------------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------------

# ‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ (—Ç–µ–∫—Å—Ç + payload)
@chat_labeler.message(text="/cancel_model")
async def cmd_cancel_model(obj):
    user_id = obj.from_id
    value = USER_MODELS.get(user_id, ModelName.LLAMA3_1_8B.value)
    await obj.answer(f"–û–∫–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–±–µ {value}. –û–Ω —Ç–µ–±—è —Å–ª—É—à–∞–µ—Ç üôÇ")

# üöÄ –ö–æ–º–∞–Ω–¥–∞ "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å" (—Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞)
@chat_labeler.message(text="/set_model")
async def cmd_set_model(obj):
    await obj.answer(
        f"{get_model_description()}\n\n–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:",
        keyboard=get_model_keyboard().get_json()
    )

# ---------------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ----------------

class ChooseModelRule(ABCRule[Union[Message, MessageEvent]]):
    """–õ–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É /choose_model <model> –∏ inline-–∫–Ω–æ–ø–∫—É choose_model:<model>"""

    async def check(self, obj) -> bool:
        # 1Ô∏è‚É£ payload —Å –∫–Ω–æ–ø–∫–∏
        payload_command = getattr(obj, "payload", {}).get("command") if hasattr(obj, "payload") else None
        if payload_command and payload_command.startswith("choose_model:"):
            return True

        # 2Ô∏è‚É£ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        text = getattr(obj, "text", "")
        if text.startswith("/choose_model"):
            return True

        return False

# ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å
@chat_labeler.message(ChooseModelRule())
async def choose_model(obj):
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    if hasattr(obj, "payload") and obj.payload:
        model_value = obj.payload["command"].split(":", 1)[1]
    else:
        parts = obj.text.split(" ", 1)
        model_value = parts[1] if len(parts) > 1 else "LLAMA3_1_8B"

    USER_MODELS[obj.from_id] = model_value
    await obj.answer(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model_value}. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.")
