from vkbottle.bot import BotLabeler, Message, MessageEvent, rules
from app.schemas.ai_service import ModelName, USER_MODELS, MODEL_CONFIG
from logger import logger
from app.keyboards.inline import get_model_keyboard
from vkbottle.dispatch.rules import ABCRule

labeler = BotLabeler()

def get_model_description() -> str:
    lines = ["üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"]
    for model, info in MODEL_CONFIG.items():
        block = (
            f"üîπ {model.value}\n"
            f"   ‚îú –†–æ–ª—å: {info.role}\n"
            f"   ‚îú –°–∫–æ—Ä–æ—Å—Ç—å: {info.speed}\n"
            f"   ‚îú –ö–∞—á–µ—Å—Ç–≤–æ: {info.quality}\n"
            f"   ‚îî {info.notes}\n"
        )
        lines.append(block)
    return "\n".join(lines)

# ---------------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------------

# ‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ (—Ç–µ–∫—Å—Ç + payload)
@labeler.message(payload={"command": "cancel_model"})
async def cmd_cancel_model(obj):
    user_id = obj.from_id
    value = USER_MODELS.get(user_id, ModelName.LLAMA3_1_8B.value)
    await obj.answer(f"–û–∫–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–±–µ {value}. –û–Ω —Ç–µ–±—è —Å–ª—É—à–∞–µ—Ç üôÇ")

# üöÄ –ö–æ–º–∞–Ω–¥–∞ "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å" (—Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞)
@labeler.message(payload={"command": "set_model"})
async def cmd_set_model(message: Message):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞")
    await message.answer(
        f"{get_model_description()}\n\n–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:",
        keyboard=get_model_keyboard().get_json()
    )

# –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
class ChooseModelRule(ABCRule[Message]):
    async def check(self, message: Message):
        payload = message.get_payload_json()
        if payload is None:
            return False
        param = payload['command']
        if param and param.startswith("choose_model:"):
            return {"model_value": param.split(":", 1)[1]}
        return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@labeler.message(ChooseModelRule())
async def choose_model_handler(message: Message, model_value: str):
    USER_MODELS[message.from_id] = model_value
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –Ω–∞ {model_value}")
    await message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model_value}. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.")