# üí° –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from app.schemas.ai_service import ModelName, USER_MODELS

# üìå –ö–æ–º–∞–Ω–¥—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –≤ –º–µ–Ω—é Telegram
commands = [
    BotCommand(command="start", description="üè† –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
    BotCommand(command="set_model", description="üöÄ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
]

# üì± –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
start_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="set_model")]
    ]
)

def get_model_keyboard(tg_id: int):
    buttons = []
    current_model = USER_MODELS.get(tg_id, ModelName.GROQ_PLTF.value)
    
    # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    for model in ModelName:
        text = f"‚úÖ {model.name}" if model.value == current_model else model.name
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"set_model:{model.value}")])
    
    # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_model")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)